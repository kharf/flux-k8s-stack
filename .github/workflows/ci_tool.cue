package workflows

import (
	"tool/file"
	"encoding/yaml"
	"strings"
	"text/template"
	"path"
)

_goos: string @tag(os,var=os)
testWorkflows: [..._#test]
_autoGenerated: "AUTOGENERATED - DO NOT EDIT\n\n"

command: cleanyamlworkflows: {
	dir:   path.FromSlash(".", path.Unix)
	yamls: file.Glob & {
		glob: path.Join([dir, "*.yaml"], _goos)
		files: [...string]
	}
	for _, _filename in yamls.files {
		"delete \(_filename)": file.RemoveAll & {
			path: _filename
		}
	}
}

command: genyamlworkflows: {
	// tests
	for w in testWorkflows {
		"\(w.filename)": file.Create & {
			filename: w.filename
			contents: "# \(_autoGenerated)\(yaml.Marshal(w.workflow))"
		}
	}

	// lint
	"\(lintWorkflow.filename)": file.Create & {
		filename: lintWorkflow.filename
		contents: "# \(_autoGenerated)\(yaml.Marshal(lintWorkflow.workflow))"
	}

	// release
	"\(releaseWorkflow.filename)": file.Create & {
		filename: releaseWorkflow.filename
		contents: "# \(_autoGenerated)\(yaml.Marshal(releaseWorkflow.workflow))"
	}

	// renovate
	"\(renovateWorkflow.filename)": file.Create & {
		filename: renovateWorkflow.filename
		contents: "# \(_autoGenerated)\(yaml.Marshal(renovateWorkflow.workflow))"
	}

	// generate
	"\(genWorkflow.filename)": file.Create & {
		filename: genWorkflow.filename
		contents: "# \(_autoGenerated)\(yaml.Marshal(genWorkflow.workflow))"
	}
}

command: genworkflows: {
	dirs: file.Glob & {
		glob: "../../catalog/*"
	}

	tools: [ for filepath in dirs.files {
		name: strings.Replace(strings.TrimPrefix(filepath, "../../catalog/"), "-", "", -1)
		tool: strings.TrimPrefix(filepath, "../../catalog/")
	},
	]

	templates: [
		{
			filename: "tests.cue"
			contents: """
				package workflows

				{{ range $t := . -}}
				_#{{ $t.name }}test: _#test & {
					tool: "{{ $t.tool }}"
				}

				{{ end }}
				testWorkflows: [..._#test] & [
					{{ range $t := . -}}
					_#{{ $t.name }}test,
					{{ end }}
				]
				"""
		},
	]

	rendered: [ for t in templates {
		filename: t.filename
		contents: "// \(_autoGenerated)\(template.Execute(t.contents, tools))"
	}]

	for i, r in rendered {
		"write-\(i)": file.Create & {
			filename: r.filename
			contents: r.contents
		}
	}
}
